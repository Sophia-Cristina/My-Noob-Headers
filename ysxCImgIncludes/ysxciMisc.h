#pragma once

#ifndef YSXCIMISC_H
#define YSXCIMISC_H

using namespace cimg_library;

// ###################################
// ############## FUNÇÕES #######
// ###################################
// ############## DECLARAÇÕES:



// ###################################

// ############################################################################################################################################
// ############################################################################################################################################
// ############################################################################################################################################

// ############################################################################################################################################
// ############## MODULAÇÕES COM HUE:
CImg<uint8_t> PaintHueRGBGapMod(CImg<uint8_t> I, double Phase, double Omega, uint8_t* RGB0, uint8_t* RGB1)
{
	std::vector<Pixel> VP = BitmapPixelMatrix(I);
	uint8_t C[3]; double Hue = 0;
	for (uint32_t n = 0; n < VP.size(); ++n)
	{
		if (InsideRGBGap(VP[n].RGB, RGB0, RGB1))
		{
			Hue = ModForm(((double)n / VP.size() * TAU) + Phase, Omega);
			LinearRGBuc(Hue, 1, 1, C); I.draw_point(VP[n].x, VP[n].y, C);
		}
	}
	return(I);
}

// ############################################################################################################################################
// ############################################################################################################################################
// ############################################################################################################################################


// ################################################# FIM ####################################################################################

#endif // SCPARSE_