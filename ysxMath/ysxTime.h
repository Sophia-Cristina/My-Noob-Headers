#pragma once

#ifndef YSXTIME_H
#define YSXTIME_H

// #####################
// ####### By Sophia Cristina
// ####### Time related things, NOT system clock!
// #####################

/*#################################################
REFERENCES:
#################################################*/


// ###############################################################################################################################################################################
// ###############################################################################################################################################################################
// ###############################################################################################################################################################################

// #################################################
// ############## CONVERTERS ##############

constexpr double Time2ms(int Min, int Sec) { return((Sec + (Min * 60)) * 1000); }
constexpr double Time2ms(Point<int> xMinySec) { return((xMinySec.y + (xMinySec.x * 60)) * 1000); }
constexpr double Time2ms(Point3D<int> xHouryMinzSec) { return((xHouryMinzSec.z + ((xHouryMinzSec.y * 60) + (xHouryMinzSec.x * 3600))) * 1000); }
constexpr double Time2ms(int Hr, int Min, int Sec) { return((Sec + ((Min * 60) + (Hr * 3600))) * 1000); }
constexpr double ms2Min(double ms) { return(ms / 60000.0); }
constexpr double Dec2Sec(double Dec) { return(Dec * 60); }
void CoutSec2Min(double s) { std::cout << floor(s / 60.0) << ":" << 60 * (s / 60.0 - floor(s / 60.0)) << '\n'; }

// #################################################
// ##############  ##############

/*class A
{
public:

// #################################################

	A()
	{
	}

	~A()
	{
	}
};*/

// ###############################################################################################################################################################################
// ####### MAIN #################################################################################################################################################################
// ###############################################################################################################################################################################

#endif // SCPARSE_